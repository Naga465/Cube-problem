// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
    'use strict';

  exports.property = function(object) {
    return function(key) {
      return object[key];
    };
  };

  exports.setProperty = function(object) {
    return function(key) {
      return function(value) {
        object[key] = value;
        return {};
      };
    };
  };
})(PS["FFI.Util"] = PS["FFI.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["FFI.Util"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Uncurried = PS["Control.Monad.Eff.Uncurried"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  exports["property"] = $foreign.property;
  exports["setProperty"] = $foreign.setProperty;
})(PS["FFI.Util"] = PS["FFI.Util"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.setStrokeStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.strokeStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.stroke = function(ctx) {
      return function() {
          ctx.stroke();
          return ctx;
      };
  };

  exports.lineTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.lineTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.moveTo = function(ctx) {
      return function(x) {
          return function(y) {
              return function() {
                  ctx.moveTo(x, y);
                  return ctx;
              };
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
          return ctx;
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
          return ctx;
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              var v = $foreign.save(ctx)();
              var v1 = action();
              var v2 = $foreign.restore(ctx)();
              return v1;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["withContext"] = withContext;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setStrokeStyle"] = $foreign.setStrokeStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["stroke"] = $foreign.stroke;
  exports["lineTo"] = $foreign.lineTo;
  exports["moveTo"] = $foreign.moveTo;
  exports["clearRect"] = $foreign.clearRect;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
    "use strict";

  exports.state = function (ctx) {
      return function (callback) {
          function loop(time) {
              callback(context)(time)();
              window.requestAnimationFrame(loop);
          }

          window.requestAnimationFrame(loop);
          return function () {}
      }
  }
  exports.addEventListener = function (ctx){
      return function (eventType) {
          return function(callback) {
              function eventHandler(e) {
                  callback(e)();
            
              }
              thecanvas.addEventListener(eventType, eventHandler);
              return function () {}
          }
      }
  }
})(PS["Main"] = PS["Main"] || {});
(function(exports) {
    "use strict";          

  exports.cos = Math.cos;    

  exports.sin = Math.sin;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["sin"] = $foreign.sin;
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  exports["constant"] = $foreign.constant;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var millisecond = 1.0;
  var every = $foreign.everyP(Signal.constant);
  exports["every"] = every;
  exports["millisecond"] = millisecond;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Main"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var FFI_Util = PS["FFI.Util"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];        
  var Point3D = function (x) {
      return x;
  };
  var Point2D = function (x) {
      return x;
  };
  var Cube = function (x) {
      return x;
  };
  var Angle3D = function (x) {
      return x;
  };
  var speedsensitivity = [ 0.0 ];
  var rotationscale = {
      x: 0.8,
      y: 1.1,
      z: 0.8
  };
  var rotaY = function (v) {
      return function (angle) {
          var sinA = $$Math.sin(angle);
          var cosA = $$Math.cos(angle);
          var rtx = v.x * cosA + v.z * sinA;
          var rtz = -v.x * sinA + v.z * cosA;
          return {
              x: rtx,
              y: v.y,
              z: rtz
          };
      };
  };
  var rotaX = function (v) {
      return function (angle) {
          var sinA = $$Math.sin(angle);
          var cosA = $$Math.cos(angle);
          var rty = v.y * cosA - v.z * sinA;
          var rtz = v.y * sinA + v.z * cosA;
          return {
              x: v.x,
              y: rty,
              z: rtz
          };
      };
  };
  var rad = function (ang) {
      return (ang * $$Math.pi) / 180.0;
  };
  var rotate = function (v) {
      return function (rx) {
          return function (ry) {
              return rotaY(rotaX(v)(rad(rx)))(rad(ry));
          };
      };
  };
  var previous = {
      x: 0.0,
      y: 0.0
  };
  var path = function (ctx) {
      return function (color) {
          return function (draw) {
              return Graphics_Canvas.withContext(ctx)(function __do() {
                  var v = Graphics_Canvas.setStrokeStyle(color)(ctx)();
                  var v1 = Graphics_Canvas.beginPath(v)();
                  var v2 = draw(v1)();
                  return Graphics_Canvas.stroke(v2)();
              });
          };
      };
  };
  var origin = {
      x: 400.0,
      y: 400.0
  };
  var project = function (v) {
      var z$prime = v.z + 4.0;
      var y$prime = (-v.y / z$prime) * origin.y + origin.y;
      var x$prime = (v.x / z$prime) * origin.x + origin.x;
      return {
          x: x$prime,
          y: y$prime
      };
  };
  var linedraw = function (ctx) {
      return function (v) {
          return function (v1) {
              return function __do() {
                  var v2 = Graphics_Canvas.moveTo(ctx)(v.x)(v.y)();
                  return Graphics_Canvas.lineTo(v2)(v1.x)(v1.y)();
              };
          };
      };
  };
  var drag = [ false ];
  var onMouseDown = function (evt) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
          var v = FFI_Util.setProperty(drag)("0")(true);
          return Data_Unit.unit;
      });
  };
  var onMouseUp = function (evt) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
          var v = FFI_Util.setProperty(drag)("0")(false);
          return Data_Unit.unit;
      });
  };
  var deltaMove = {
      x: 0.0,
      y: 0.0
  };
  var onMouseMove = function (evt) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)((function () {
          var v = FFI_Util.property(evt)("offsetX");
          var v1 = FFI_Util.property(evt)("offsetY");
          return function __do() {
              var v2 = (function () {
                  var $67 = FFI_Util.property(drag)("0");
                  if ($67) {
                      var v2 = FFI_Util.property(previous)("x");
                      var v3 = FFI_Util.property(previous)("y");
                      return function __do() {
                          var v4 = FFI_Util.setProperty(deltaMove)("x")(v - v2);
                          var v5 = FFI_Util.setProperty(deltaMove)("y")(v1 - v3);
                          var accel = FFI_Util.property(speedsensitivity)("0") + 3.0;
                          FFI_Util.setProperty(speedsensitivity)("0")(accel);
                          return Data_Unit.unit;
                      };
                  };
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              })()();
              var v3 = FFI_Util.setProperty(previous)("x")(v);
              var v4 = FFI_Util.setProperty(previous)("y")(v1);
              return Data_Unit.unit;
          };
      })());
  };
  var dcube = function (ctx) {
      return function (v) {
          return function (v1) {
              var v11 = project(rotate({
                  x: -v.size,
                  y: -v.size,
                  z: -v.size
              })(v1.ax)(v1.ay));
              var v2 = project(rotate({
                  x: -v.size,
                  y: v.size,
                  z: -v.size
              })(v1.ax)(v1.ay));
              var v3 = project(rotate({
                  x: -v.size,
                  y: -v.size,
                  z: v.size
              })(v1.ax)(v1.ay));
              var v4 = project(rotate({
                  x: -v.size,
                  y: v.size,
                  z: v.size
              })(v1.ax)(v1.ay));
              var v5 = project(rotate({
                  x: v.size,
                  y: -v.size,
                  z: -v.size
              })(v1.ax)(v1.ay));
              var v6 = project(rotate({
                  x: v.size,
                  y: v.size,
                  z: -v.size
              })(v1.ax)(v1.ay));
              var v7 = project(rotate({
                  x: v.size,
                  y: -v.size,
                  z: v.size
              })(v1.ax)(v1.ay));
              var v8 = project(rotate({
                  x: v.size,
                  y: v.size,
                  z: v.size
              })(v1.ax)(v1.ay));
              return path(ctx)(v.color)(function (ctx2) {
                  return function __do() {
                      var v9 = linedraw(ctx2)(v11)(v5)();
                      var v10 = linedraw(v9)(v5)(v6)();
                      var v12 = linedraw(v10)(v6)(v2)();
                      var v13 = linedraw(v12)(v2)(v11)();
                      var v14 = linedraw(v13)(v3)(v7)();
                      var v15 = linedraw(v14)(v7)(v8)();
                      var v16 = linedraw(v15)(v8)(v4)();
                      var v17 = linedraw(v16)(v4)(v3)();
                      var v18 = linedraw(v17)(v11)(v3)();
                      var v19 = linedraw(v18)(v5)(v7)();
                      var v20 = linedraw(v19)(v6)(v8)();
                      return linedraw(v20)(v2)(v4)();
                  };
              });
          };
      };
  };
  var updateCube = function (ctx) {
      return function (time) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
              var v = Graphics_Canvas.clearRect(ctx)({
                  x: 0.0,
                  y: 0.0,
                  h: 800.0,
                  w: 800.0
              })();
              var time1 = Signal_Time.every(Signal_Time.millisecond);
              var cube = {
                  size: 0.8,
                  color: "#0000FF"
              };
              var v1 = FFI_Util.property(speedsensitivity)("0");
              var v2 = (function () {
                  var $87 = v1 > 0.0;
                  if ($87) {
                      return function __do() {
                          var v2 = FFI_Util.setProperty(speedsensitivity)("0")(v1 - 1.0);
                          var v3 = FFI_Util.property(deltaMove)("x");
                          var v4 = FFI_Util.property(deltaMove)("y");
                          var v5 = FFI_Util.setProperty(rotationscale)("x")(FFI_Util.property(rotationscale)("x") - v4);
                          var v6 = FFI_Util.setProperty(rotationscale)("y")(FFI_Util.property(rotationscale)("y") - v3);
                          return Data_Unit.unit;
                      };
                  };
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              })()();
              var an = {
                  ax: FFI_Util.property(rotationscale)("x"),
                  ay: FFI_Util.property(rotationscale)("y"),
                  az: 0.0
              };
              var v3 = dcube(ctx)(cube)(an)();
              return Data_Unit.unit;
          });
      };
  };
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
      var v = Graphics_Canvas.getCanvasElementById("thecanvas")();
      var __unused = function (dictPartial1) {
          return function ($dollar40) {
              return $dollar40;
          };
      };
      return __unused()((function () {
          if (v instanceof Data_Maybe.Just) {
              return function __do() {
                  var v1 = Graphics_Canvas.getContext2D(v.value0)();
                  var v2 = Graphics_Canvas.setFillStyle("#0000FF")(v1)();
                  $foreign.addEventListener(v.value0)("mouseup")(onMouseUp)();
                  $foreign.addEventListener(v.value0)("mousedown")(onMouseDown)();
                  $foreign.addEventListener(v.value0)("mousemove")(onMouseMove)();
                  $foreign.state(v2)(updateCube)();
                  return Data_Unit.unit;
              };
          };
          throw new Error("Failed pattern match at Main line 158, column 5 - line 159, column 5: " + [ v.constructor.name ]);
      })())();
  });
  exports["Point2D"] = Point2D;
  exports["Point3D"] = Point3D;
  exports["Angle3D"] = Angle3D;
  exports["Cube"] = Cube;
  exports["origin"] = origin;
  exports["rotaX"] = rotaX;
  exports["rotaY"] = rotaY;
  exports["project"] = project;
  exports["rad"] = rad;
  exports["rotate"] = rotate;
  exports["path"] = path;
  exports["linedraw"] = linedraw;
  exports["dcube"] = dcube;
  exports["deltaMove"] = deltaMove;
  exports["previous"] = previous;
  exports["rotationscale"] = rotationscale;
  exports["drag"] = drag;
  exports["speedsensitivity"] = speedsensitivity;
  exports["onMouseDown"] = onMouseDown;
  exports["onMouseUp"] = onMouseUp;
  exports["onMouseMove"] = onMouseMove;
  exports["main"] = main;
  exports["updateCube"] = updateCube;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["state"] = $foreign.state;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
